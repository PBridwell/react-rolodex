{"version":3,"sources":["utils/api.js","components/EmployeeTable/index.js","components/SearchBar/index.js","components/EmployeeList/index.js","components/Directory/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","EmployeeTable","props","className","scope","onClick","handleSortID","aria-hidden","handleSortName","handleSortEmail","handleSortPhone","children","SearchBar","style","margin","onChange","handleSearch","value","name","type","placeholder","id","handleSubmit","padding","EmployeeList","this","employee","email","phone","Component","Directory","employees","map","key","App","useState","setEmployees","search","setSearch","sortID","setSortID","sortName","setSortName","sortEmail","setSortEmail","sortPhone","setSortPhone","searchEmployees","api","then","res","data","console","log","catch","err","useEffect","e","target","preventDefault","filter","includes","idSort","reverse","a","b","sort","phoneSort","emailSort","nameSort","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.24bcd4bc.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst URL = 'https://jsonplaceholder.typicode.com/users';\r\n\r\n// make the axios call to the jsonplaceholder site and get a users list\r\nexport default {\r\n\tsearch: function () {\r\n\t\treturn axios.get(URL);\r\n\t},\r\n};\r\n","import React from 'react';\r\n\r\n// setup the table headers with sort\r\nfunction EmployeeTable(props) {\r\n\treturn (\r\n\t\t<table className='table table-striped table-dark'>\r\n\t\t\t<thead className='thead-light'>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th scope='col'>\r\n\t\t\t\t\t\tID#{' '}\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tonClick={props.handleSortID}\r\n\t\t\t\t\t\t\tclassName='fa fa-sort'\r\n\t\t\t\t\t\t\taria-hidden='true'\r\n\t\t\t\t\t\t></i>\r\n\t\t\t\t\t</th>\r\n\t\t\t\t\t<th scope='col'>\r\n\t\t\t\t\t\tName{' '}\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tonClick={props.handleSortName}\r\n\t\t\t\t\t\t\tclassName='fa fa-sort'\r\n\t\t\t\t\t\t\taria-hidden='true'\r\n\t\t\t\t\t\t></i>\r\n\t\t\t\t\t</th>\r\n\t\t\t\t\t<th scope='col'>\r\n\t\t\t\t\t\tEmail{' '}\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tonClick={props.handleSortEmail}\r\n\t\t\t\t\t\t\tclassName='fa fa-sort'\r\n\t\t\t\t\t\t\taria-hidden='true'\r\n\t\t\t\t\t\t></i>\r\n\t\t\t\t\t</th>\r\n\t\t\t\t\t<th scope='col'>\r\n\t\t\t\t\t\tPhone{' '}\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tonClick={props.handleSortPhone}\r\n\t\t\t\t\t\t\tclassName='fa fa-sort'\r\n\t\t\t\t\t\t\taria-hidden='true'\r\n\t\t\t\t\t\t></i>\r\n\t\t\t\t\t</th>\r\n\t\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t\t<tbody>{props.children}</tbody>\r\n\t\t</table>\r\n\t);\r\n}\r\n\r\nexport default EmployeeTable;\r\n","import React from 'react';\r\n\r\n// create navbar with search form inline\r\nfunction SearchBar(props) {\r\n\treturn (\r\n\t\t<nav className='navbar navbar-dark bg-light'>\r\n\t\t\t<h2>\r\n\t\t\t\t<i className='fa fa-address-book' aria-hidden='true'></i> Welcome to the\r\n\t\t\t\tReact Rolodex\r\n\t\t\t</h2>\r\n\t\t\t{/* create the form and use handleSearch for input and HandleSubmit for button */}\r\n\t\t\t<form className='form-inline'>\r\n\t\t\t\t<input\r\n\t\t\t\t\tstyle={{ margin: '5px' }}\r\n\t\t\t\t\tonChange={props.handleSearch}\r\n\t\t\t\t\tvalue={props.value}\r\n\t\t\t\t\tname='search'\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tclassName='form-control'\r\n\t\t\t\t\tplaceholder='Search For an Employee'\r\n\t\t\t\t\tid='search'\r\n\t\t\t\t/>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='btn btn-outline-warning my-2 my-sm-0'\r\n\t\t\t\t\ttype='submit'\r\n\t\t\t\t\tonClick={props.handleSubmit}\r\n\t\t\t\t\tstyle={{ padding: '5px', margin: '5px' }}\r\n\t\t\t\t>\r\n\t\t\t\t\tSearch\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t</nav>\r\n\t);\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// create a row on the employee table for each employee\r\nexport class EmployeeList extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<tr>\r\n\t\t\t\t<th scope='row'>{this.props.employee.id}</th>\r\n\t\t\t\t<td>{this.props.employee.name}</td>\r\n\t\t\t\t<td>{this.props.employee.email}</td>\r\n\t\t\t\t<td>{this.props.employee.phone}</td>\r\n\t\t\t</tr>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// proptypes. Makes sure that each employee is an object\r\nEmployeeList.propTypes = {\r\n\temployee: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default EmployeeList;\r\n","// import React, { Component } from 'react';\r\nimport EmployeeList from '../EmployeeList/index';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport React from 'react';\r\n\r\nconst Directory = (props) => {\r\n\treturn props.employees.map((employee) => (\r\n\t\t<EmployeeList key={employee.id} employee={employee} />\r\n\t));\r\n};\r\n// proptypes\r\nDirectory.propTypes = {\r\n\temployees: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Directory;\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport api from './utils/api';\nimport EmployeeTable from './components/EmployeeTable/index';\nimport SearchBar from './components/SearchBar';\nimport Directory from './components/Directory';\n\nconst App = () => {\n\tconst [employees, setEmployees] = useState([]);\n\tconst [search, setSearch] = useState('');\n\tconst [sortID, setSortID] = useState(false);\n\tconst [sortName, setSortName] = useState(false);\n\tconst [sortEmail, setSortEmail] = useState(false);\n\tconst [sortPhone, setSortPhone] = useState(false);\n\n\t//   calls axios search function\n\tconst searchEmployees = () => {\n\t\tapi\n\t\t\t.search()\n\t\t\t.then((res) => setEmployees(res.data))\n\t\t\t.then((res) => console.log(employees))\n\t\t\t.catch((err) => console.log(err));\n\t};\n\n\tuseEffect(() => {\n\t\tsearchEmployees();\n\t}, []);\n\t// //  sort by id function, reversing then resorting on alternating clicks\n\tconst handleSortID = () => {\n\t\tconst idSort = employees;\n\t\tif (!sortID) {\n\t\t\tidSort.sort((a, b) => (a.id > b.id ? 1 : -1));\n\t\t\tsetEmployees(idSort);\n\t\t\tsetSortID(true);\n\t\t\t// Functionality for alternate click\n\t\t} else {\n\t\t\tidSort.reverse((a, b) => (a.id < b.id ? -1 : 1));\n\t\t\tsetEmployees(idSort);\n\t\t\tsetSortID(false);\n\t\t}\n\t};\n\n\t// //  sort by name function, reversing then resorting on alternating clicks\n\tconst handleSortName = () => {\n\t\tconst nameSort = employees;\n\t\tif (!sortName) {\n\t\t\t// 1 and -1 values for ascending and descending\n\t\t\tnameSort.sort((a, b) => (a.name > b.name ? 1 : -1));\n\t\t\tsetEmployees(nameSort);\n\t\t\tsetSortName(true);\n\t\t} else {\n\t\t\tnameSort.reverse((a, b) => (a.name < b.name ? -1 : 1));\n\t\t\tsetEmployees(nameSort);\n\t\t\tsetSortName(false);\n\t\t}\n\t};\n\n\t// //  sort by email function, reversing then resorting on alternating clicks\n\tconst handleSortEmail = () => {\n\t\tconst emailSort = employees;\n\t\tif (!sortEmail) {\n\t\t\temailSort.sort((a, b) => (a.email > b.email ? 1 : -1));\n\t\t\tsetEmployees(emailSort);\n\t\t\tsetSortEmail(true);\n\t\t} else {\n\t\t\temailSort.reverse((a, b) => (a.email < b.email ? -1 : 1));\n\t\t\tsetEmployees(emailSort);\n\t\t\tsetSortEmail(false);\n\t\t}\n\t};\n\n\t// //  sort by phone function, reversing then resorting on each click\n\tconst handleSortPhone = () => {\n\t\tconst phoneSort = employees;\n\t\tif (!sortPhone) {\n\t\t\tphoneSort.sort((a, b) => (a.phone > b.phone ? 1 : -1));\n\t\t\tsetEmployees(phoneSort);\n\t\t\tsetSortPhone(true);\n\t\t} else {\n\t\t\tphoneSort.reverse((a, b) => (a.phone < b.phone ? -1 : 1));\n\t\t\tsetEmployees(phoneSort);\n\t\t\tsetSortPhone(false);\n\t\t}\n\t};\n\n\t// //  update the state.search value instantly as input is entered in form\n\tconst handleSearch = (e) => {\n\t\tconst value = e.target.value;\n\t\tsetSearch(value);\n\t\tconsole.log(search);\n\t};\n\n\t// // onClick take the contents of the input and use it to filter employees\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\t// If searchbar is empty, entire list is returned\n\t\tif (search === '') {\n\t\t\tsearchEmployees();\n\t\t} else {\n\t\t\tsetEmployees([\n\t\t\t\t...employees.filter((employee) => employee.name.includes(search)),\n\t\t\t]);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className='text-center'>\n\t\t\t{/* Header searchbar here */}\n\t\t\t<SearchBar\n\t\t\t\tvalue={search}\n\t\t\t\thandleSearch={handleSearch}\n\t\t\t\thandleSubmit={handleSubmit}\n\t\t\t></SearchBar>\n\n\t\t\t<EmployeeTable\n\t\t\t\thandleSortID={handleSortID}\n\t\t\t\thandleSortPhone={handleSortPhone}\n\t\t\t\thandleSortEmail={handleSortEmail}\n\t\t\t\thandleSortName={handleSortName}\n\t\t\t>\n\t\t\t\t<Directory employees={employees} />\n\t\t\t</EmployeeTable>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}